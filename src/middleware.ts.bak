import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';
import { createServerClient, type CookieOptions } from '@supabase/ssr';

// Simple middleware that only handles cookies
export async function middleware(req: NextRequest) {
  console.log('SIMPLIFIED MIDDLEWARE RUNNING:', req.nextUrl.pathname);
  
  // Create a response with updated cookies if needed
  let res = NextResponse.next();
  
  try {
    // Skip middleware for static assets and API routes
    if (
      req.nextUrl.pathname.startsWith('/_next') ||
      req.nextUrl.pathname.startsWith('/static') ||
      req.nextUrl.pathname.startsWith('/api') ||
      req.nextUrl.pathname === '/favicon.ico'
    ) {
      console.log('Path excluded from middleware checks');
      return res;
    }
    
    // Create a Supabase client just for cookie management
    // This won't do any redirects, just handle cookies
    const supabase = createServerClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
      {
        cookies: {
          get(name: string) {
            const cookie = req.cookies.get(name);
            return cookie?.value;
          },
          set(name: string, value: string, options: CookieOptions) {
            req.cookies.set({
              name,
              value,
              ...options,
            });
            
            // Update the response cookies
            res = NextResponse.next({
              request: {
                headers: req.headers,
              },
            });
            
            res.cookies.set({
              name,
              value,
              ...options,
            });
          },
          remove(name: string, options: CookieOptions) {
            req.cookies.delete({
              name,
              ...options,
            });
            
            // Update the response cookies
            res = NextResponse.next({
              request: {
                headers: req.headers,
              },
            });
            
            res.cookies.delete({
              name,
              ...options,
            });
          },
        },
      }
    );
    
    // We're not checking auth status or redirecting in middleware anymore
    // Just returning the response with cookies handled properly
    return res;
  } catch (error) {
    console.error('Middleware error:', error);
    return res;
  }
}

// Very limited matcher to minimize issues
export const config = {
  matcher: [
    // Match all requests
    '/((?!_next/static|_next/image|favicon.ico).*)',
  ],
};